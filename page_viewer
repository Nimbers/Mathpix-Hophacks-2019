# for interacting with the mathpix api

import os
import base64
import requests
import json

# for interacting with the pdf to jpg convertor

import pdf2image
from PIL import Image

# for calculating median
import statistics


# convert initial pdf to image
PDF_PATH = "Turing_Paper_1936.pdf"
DPI = 500
FORMAT = 'jpg'
THREAD_COUNT = 1


def pdftopil():

    return pdf2image.convert_from_path(PDF_PATH, dpi=DPI, fmt=FORMAT, thread_count=THREAD_COUNT)


def save_images(pil_images):
    # This method helps in converting the images in PIL Image file format to the required image format
    index = 0
    for image in pil_images:
        image.save("page_" + str(index) + ".jpg")
        index += 1
    return index


def convert():
    return save_images(pdftopil())


# convert pdf to image and store number of pages
#pages = convert()


def blank(filename):

    # retrieves pixel array of image
    im = Image.open(filename, "r")

    rgb = list(im.getdata())

    # flattens array
    rgb = [x for s in rgb for x in s]

    w, h = im.size

    # digits defines how many places after the decimal place to keep
    digits = 5

    # creates new array of averages of row values
    averages = []

    for i in range(h):
        sum = 0
        for j in range(3 * w):
            sum += rgb[i * 3 * w + j]
        averages.append(sum * (10 ** digits) // (3 * w))

    # calculates median of the array of average row values
    median = statistics.median(averages)

    # buffer to make sure lines are more likely to be counted as text
    buffer = 0

    # calculates boolean array of which values likely have text in them
    blank = []
    for i in range(h):
        blank.append(averages[i] < median * (1 + buffer))

    return blank


def split(filename):

    gap_array = blank(filename)

    print(gap_array)

    # rgb array to test
    rgb = []

    for i in range(len(gap_array)):
        if gap_array[i]:
            rgb.append((0,0,0))
        else:
            rgb.append((255,255,255))

    #Image.fromarray(np.array(rgb), 'RGB').save("comparison.jpg")
    comparison = Image.new("RGB", (1, len(rgb)), "white")
    comparison.putdata(rgb)
    comparison.save("comparison.png")

# interpret program

def interpret(filename):

    split_array = split(filename)

# begin intepreter loop

for i in range(7,8):
    filename = "page_" + str(i) + ".jpg"
    interpret(filename)
